{
  "version": 3,
  "sources": ["../../javascript/config.js", "../../javascript/utils.js", "../../javascript/projects.js"],
  "sourcesContent": ["'use strict;'\n\nconst CONFIG_ID = 'ood_config'\n\nexport function configData() {\n  return document.getElementById(CONFIG_ID).dataset;\n}\n\nexport function maxFileSize () {\n  const cfgData = configData();\n\n  // Check if cfgData['maxFileSize'] is just empty string, \n  // if so set default of maxFileUpload=10737420000 bytes.\n  if (cfgData['maxFileSize'].length == 0) {\n    return parseInt(10737420000, 10);\n  }\n  else {\n    const maxFileSize = cfgData['maxFileSize'];\n    return parseInt(maxFileSize, 10);\n  }\n}\n\nexport function transfersPath() {\n  const cfgData = configData();\n  const transfersPath = cfgData['transfersPath'];\n\n  return transfersPath;\n}\n\nexport function jobsInfoPath(){\n  const cfgData = configData();\n  return cfgData['jobsInfoPath'];\n}\n\nexport function csrfToken() {\n  const csrf_token = document.querySelector('meta[name=\"csrf-token\"]').content;\n\n  return csrf_token;\n}\n\nexport function uppyLocale() {\n  const cfgData = configData();\n  return JSON.parse(cfgData['uppyLocale']);\n}\n\nexport function isBCDynamicJSEnabled() {\n  const cfgData = configData();\n  return cfgData['bcDynamicJs'] == 'true'\n}\n\n/*\n  Will return null if xdmod integration is not enabled.\n*/\nexport function xdmodUrl(){\n  const cfgData = configData();\n  const url = cfgData['xdmodUrl'];\n  return url == \"\" ? null : url;\n}\n\nexport function analyticsPath(type){\n  const cfgData = configData();\n  const basePath = cfgData['baseAnalyticsPath']\n  return `${basePath}/${type}`;\n}\n\nexport function bcPollDelay() {\n  const cfgData = configData();\n  return Number(cfgData['bcPollDelay']);\n}\n\nexport function bcIndexUrl() {\n  const cfgData = configData();\n  return cfgData['bcIndexUrl'];\n}\n\nexport function statusPollDelay() {\n  const cfgData = configData();\n  return Number(cfgData['statusPollDelay']);\n}\n\nexport function statusIndexUrl() {\n  const cfgData = configData();\n  return cfgData['statusIndexUrl'];\n}", "\nexport function cssBadgeForState(state){\n  switch (state) {\n    case 'completed':\n      return 'bg-success';\n    case 'running':\n      return 'bg-primary'\n    case 'queued':\n      return 'bg-info';\n    case 'queued_held':\n      return 'bg-warning';\n    case 'suspended':\n      return 'bg-warning';\n    default:\n      return 'bg-warning';\n  }\n}\n\nexport function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function startOfYear() {\n  const now = new Date();\n  const past = new Date();\n  past.setDate(1);\n  past.setMonth(0);\n  past.setFullYear(now.getFullYear());\n  return `${past.getFullYear()}-${past.getMonth()+1}-${past.getDate()}`;\n}\n\nexport function thirtyDaysAgo() {\n  const now = new Date();\n  const past = new Date();\n  past.setDate(now.getDate() - 30);\n  return `${past.getFullYear()}-${past.getMonth()+1}-${past.getDate()}`;\n}\n\nexport function today() {\n  const now = new Date();\n  return `${now.getFullYear()}-${now.getMonth()+1}-${now.getDate()}`;\n}\n\nfunction showSpinner() {\n  $('body').addClass('modal-open');\n  $('#full-page-spinner').removeClass('d-none');\n}\n\nexport function bindFullPageSpinnerEvent() {\n  $('.full-page-spinner').each((index, element) => {\n    const $element = $(element);\n    if($element.is('a')) {\n      $element.on('click', showSpinner);\n    } else {\n      $element.closest('form').on('submit', showSpinner);\n    }\n  });\n}\n", "import { jobsInfoPath } from './config.js';\nimport { cssBadgeForState } from './utils.js';\n\n\njQuery(function() {\n  $('[data-job-poller=\"true\"]').each((_index, ele) => {\n    pollForJobInfo(ele);\n  });\n\n  $(\"[data-bs-toggle='project']\").each((_index, ele) => {\n    updateProjectSize(ele);\n  });\n});\n\nfunction pollForJobInfo(element) {\n\n  const jobId = element.dataset['jobId'];\n  const jobCluster = element.dataset['jobCluster'];\n  const url = `${jobsInfoPath()}/${jobCluster}/${jobId}`;\n\n  if(jobId === \"\" || jobCluster === \"\") {\n    element.innerHTML = \"\";\n    return;\n  }\n\n  fetch(url, { headers: { 'Accept': 'application/json' }, cache: 'no-store' })\n    .then((response) => { \n      if (!response.ok) {\n        if(response.status === 404) {\n          throw new Error('404 response while looking for job', { cause: response });\n        } else{\n          throw new Error('Not 2xx response while looking for job', { cause: response });\n        }\n      } else {\n        return response.json();\n      }\n    })\n    .then((data) => {\n      const state = data['state'];\n      element.innerHTML = jobInfoDiv(jobId, state);\n      if(state !== 'completed') {\n        // keep going\n        setTimeout(pollForJobInfo, 30000, element);\n      }\n    })\n    .catch((error) => {\n      element.innerHTML = jobInfoDiv(jobId, 'undetermined', error.message, 'Unable to find the job details');\n     });\n}\n\nfunction jobInfoDiv(jobId, state, stateTitle='', stateDescription='') {\n  return `<div class=\"job-info justify-content-center d-grid\">\n            <span class=\"me-2\">${jobId}</span>\n            <span class=\"job-info-title badge ${cssBadgeForState(state)}\" title=\"${stateTitle}\">${state.toUpperCase()}</span>\n            <span class=\"job-info-description text-muted\">${stateDescription}</span>\n          </div>`;\n}\n\nfunction updateProjectSize(element) {\n  const UNDETERMINED = 'Undetermined Size';\n  const $container = $(element);\n\n  const projectPath = $container.data('url');\n  $.ajax({\n    url: projectPath,\n    type: 'GET',\n    headers: {\n      'Accept': 'application/json'\n    },\n    success: function (projectData) {\n      const projectSize = projectData.size === 0 ? UNDETERMINED : projectData.human_size;\n      $container.text(`(${projectSize})`);\n    },\n    error: function (request, status, error) {\n      console.log(\"An error occurred getting project size!\\n\" + error);\n      $container.text(`(${UNDETERMINED})`);\n    }\n  });\n}\n"],
  "mappings": ";AAAA;AAEA,IAAM,YAAY;AAEX,SAAS,aAAa;AAC3B,SAAO,SAAS,eAAe,SAAS,EAAE;AAC5C;AAuBO,SAAS,eAAc;AAC5B,QAAM,UAAU,WAAW;AAC3B,SAAO,QAAQ;AACjB;;;AC/BO,SAAS,iBAAiB,OAAM;AACrC,UAAQ;AAAA,SACD;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA;AAEP,aAAO;AAAA;AAEb;;;ACZA,OAAO,WAAW;AAChB,IAAE,0BAA0B,EAAE,KAAK,CAAC,QAAQ,QAAQ;AAClD,mBAAe,GAAG;AAAA,EACpB,CAAC;AAED,IAAE,4BAA4B,EAAE,KAAK,CAAC,QAAQ,QAAQ;AACpD,sBAAkB,GAAG;AAAA,EACvB,CAAC;AACH,CAAC;AAED,SAAS,eAAe,SAAS;AAE/B,QAAM,QAAQ,QAAQ,QAAQ;AAC9B,QAAM,aAAa,QAAQ,QAAQ;AACnC,QAAM,MAAM,GAAG,aAAa,KAAK,cAAc;AAE/C,MAAG,UAAU,MAAM,eAAe,IAAI;AACpC,YAAQ,YAAY;AACpB;AAAA,EACF;AAEA,QAAM,KAAK,EAAE,SAAS,EAAE,UAAU,mBAAmB,GAAG,OAAO,WAAW,CAAC,EACxE,KAAK,CAAC,aAAa;AAClB,QAAI,CAAC,SAAS,IAAI;AAChB,UAAG,SAAS,WAAW,KAAK;AAC1B,cAAM,IAAI,MAAM,sCAAsC,EAAE,OAAO,SAAS,CAAC;AAAA,MAC3E,OAAM;AACJ,cAAM,IAAI,MAAM,0CAA0C,EAAE,OAAO,SAAS,CAAC;AAAA,MAC/E;AAAA,IACF,OAAO;AACL,aAAO,SAAS,KAAK;AAAA,IACvB;AAAA,EACF,CAAC,EACA,KAAK,CAAC,SAAS;AACd,UAAM,QAAQ,KAAK;AACnB,YAAQ,YAAY,WAAW,OAAO,KAAK;AAC3C,QAAG,UAAU,aAAa;AAExB,iBAAW,gBAAgB,KAAO,OAAO;AAAA,IAC3C;AAAA,EACF,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,YAAQ,YAAY,WAAW,OAAO,gBAAgB,MAAM,SAAS,gCAAgC;AAAA,EACtG,CAAC;AACN;AAEA,SAAS,WAAW,OAAO,OAAO,aAAW,IAAI,mBAAiB,IAAI;AACpE,SAAO;AAAA,iCACwB;AAAA,gDACe,iBAAiB,KAAK,aAAa,eAAe,MAAM,YAAY;AAAA,4DACxD;AAAA;AAE5D;AAEA,SAAS,kBAAkB,SAAS;AAClC,QAAM,eAAe;AACrB,QAAM,aAAa,EAAE,OAAO;AAE5B,QAAM,cAAc,WAAW,KAAK,KAAK;AACzC,IAAE,KAAK;AAAA,IACL,KAAK;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,MACP,UAAU;AAAA,IACZ;AAAA,IACA,SAAS,SAAU,aAAa;AAC9B,YAAM,cAAc,YAAY,SAAS,IAAI,eAAe,YAAY;AACxE,iBAAW,KAAK,IAAI,cAAc;AAAA,IACpC;AAAA,IACA,OAAO,SAAU,SAAS,QAAQ,OAAO;AACvC,cAAQ,IAAI,8CAA8C,KAAK;AAC/D,iBAAW,KAAK,IAAI,eAAe;AAAA,IACrC;AAAA,EACF,CAAC;AACH;",
  "names": []
}
