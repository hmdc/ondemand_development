{
  "version": 3,
  "sources": ["../../javascript/config.js"],
  "sourcesContent": ["'use strict;'\n\nconst CONFIG_ID = 'ood_config'\n\nexport function configData() {\n  return document.getElementById(CONFIG_ID).dataset;\n}\n\nexport function maxFileSize () {\n  const cfgData = configData();\n\n  // Check if cfgData['maxFileSize'] is just empty string, \n  // if so set default of maxFileUpload=10737420000 bytes.\n  if (cfgData['maxFileSize'].length == 0) {\n    return parseInt(10737420000, 10);\n  }\n  else {\n    const maxFileSize = cfgData['maxFileSize'];\n    return parseInt(maxFileSize, 10);\n  }\n}\n\nexport function transfersPath() {\n  const cfgData = configData();\n  const transfersPath = cfgData['transfersPath'];\n\n  return transfersPath;\n}\n\nexport function jobsInfoPath(){\n  const cfgData = configData();\n  return cfgData['jobsInfoPath'];\n}\n\nexport function csrfToken() {\n  const csrf_token = document.querySelector('meta[name=\"csrf-token\"]').content;\n\n  return csrf_token;\n}\n\nexport function uppyLocale() {\n  const cfgData = configData();\n  return JSON.parse(cfgData['uppyLocale']);\n}\n\nexport function isBCDynamicJSEnabled() {\n  const cfgData = configData();\n  return cfgData['bcDynamicJs'] == 'true'\n}\n\n/*\n  Will return null if xdmod integration is not enabled.\n*/\nexport function xdmodUrl(){\n  const cfgData = configData();\n  const url = cfgData['xdmodUrl'];\n  return url == \"\" ? null : url;\n}\n\nexport function analyticsPath(type){\n  const cfgData = configData();\n  const basePath = cfgData['baseAnalyticsPath']\n  return `${basePath}/${type}`;\n}\n\nexport function bcPollDelay() {\n  const cfgData = configData();\n  return Number(cfgData['bcPollDelay']);\n}\n\nexport function bcIndexUrl() {\n  const cfgData = configData();\n  return cfgData['bcIndexUrl'];\n}\n\nexport function statusPollDelay() {\n  const cfgData = configData();\n  return Number(cfgData['statusPollDelay']);\n}\n\nexport function statusIndexUrl() {\n  const cfgData = configData();\n  return cfgData['statusIndexUrl'];\n}"],
  "mappings": ";AAAA;AAEA,IAAM,YAAY;AAEX,SAAS,aAAa;AAC3B,SAAO,SAAS,eAAe,SAAS,EAAE;AAC5C;AAEO,SAAS,cAAe;AAC7B,QAAM,UAAU,WAAW;AAI3B,MAAI,QAAQ,eAAe,UAAU,GAAG;AACtC,WAAO,SAAS,WAAa,EAAE;AAAA,EACjC,OACK;AACH,UAAMA,eAAc,QAAQ;AAC5B,WAAO,SAASA,cAAa,EAAE;AAAA,EACjC;AACF;AAEO,SAAS,gBAAgB;AAC9B,QAAM,UAAU,WAAW;AAC3B,QAAMC,iBAAgB,QAAQ;AAE9B,SAAOA;AACT;AAEO,SAAS,eAAc;AAC5B,QAAM,UAAU,WAAW;AAC3B,SAAO,QAAQ;AACjB;AAEO,SAAS,YAAY;AAC1B,QAAM,aAAa,SAAS,cAAc,yBAAyB,EAAE;AAErE,SAAO;AACT;AAEO,SAAS,aAAa;AAC3B,QAAM,UAAU,WAAW;AAC3B,SAAO,KAAK,MAAM,QAAQ,aAAa;AACzC;AAEO,SAAS,uBAAuB;AACrC,QAAM,UAAU,WAAW;AAC3B,SAAO,QAAQ,kBAAkB;AACnC;AAKO,SAAS,WAAU;AACxB,QAAM,UAAU,WAAW;AAC3B,QAAM,MAAM,QAAQ;AACpB,SAAO,OAAO,KAAK,OAAO;AAC5B;AAEO,SAAS,cAAc,MAAK;AACjC,QAAM,UAAU,WAAW;AAC3B,QAAM,WAAW,QAAQ;AACzB,SAAO,GAAG,YAAY;AACxB;AAEO,SAAS,cAAc;AAC5B,QAAM,UAAU,WAAW;AAC3B,SAAO,OAAO,QAAQ,cAAc;AACtC;AAEO,SAAS,aAAa;AAC3B,QAAM,UAAU,WAAW;AAC3B,SAAO,QAAQ;AACjB;AAEO,SAAS,kBAAkB;AAChC,QAAM,UAAU,WAAW;AAC3B,SAAO,OAAO,QAAQ,kBAAkB;AAC1C;AAEO,SAAS,iBAAiB;AAC/B,QAAM,UAAU,WAAW;AAC3B,SAAO,QAAQ;AACjB;",
  "names": ["maxFileSize", "transfersPath"]
}
