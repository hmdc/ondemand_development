{"version":3,"names":["Translator","ee","nanoid","throttle","DefaultStore","getFileType","getFileNameAndExtension","getSafeFileId","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","Restricter","defaultOptions","defaultRestrictionOptions","RestrictionError","packageJson","locale","defaultUploadState","totalProgress","allowNewUpload","error","recoveredState","_plugins","_classPrivateFieldLooseKey","_restricter","_storeUnsubscribe","_emitter","_preProcessors","_uploaders","_postProcessors","_informAndEmit","_checkRequiredMetaFieldsOnFile","_checkRequiredMetaFields","_assertNewUploadAllowed","_transformFile","_startIfAutoProceed","_checkAndUpdateFileState","_addListeners","_updateOnlineStatus","_requestClientById","_createUpload","_getUpload","_removeUpload","_runUpload","Uppy","constructor","opts","Object","defineProperty","value","_runUpload2","_removeUpload2","_getUpload2","_createUpload2","_addListeners2","_checkAndUpdateFileState2","_startIfAutoProceed2","_transformFile2","_assertNewUploadAllowed2","_checkRequiredMetaFields2","_checkRequiredMetaFieldsOnFile2","_informAndEmit2","writable","create","Set","scheduledAutoProceed","wasOffline","calculateProgress","file","data","fileInState","getFile","id","log","progress","percentage","canHavePercentage","Number","isFinite","bytesTotal","setFileState","bytesUploaded","Math","round","calculateTotalProgress","leading","trailing","updateOnlineStatus","bind","Map","defaultLocale","autoProceed","allowMultipleUploadBatches","debug","restrictions","meta","onBeforeFileAdded","files","hasOwn","onBeforeUpload","store","logger","infoTimeout","merged","VERSION","i18nInit","setState","plugins","currentUploads","capabilities","uploadProgress","individualCancellation","resumableUploads","info","_classPrivateFieldLooseBase","i18n","subscribe","prevState","nextState","patch","emit","updateAll","window","event","_len","arguments","length","args","Array","_key","on","callback","once","off","state","iteratePlugins","plugin","update","getState","patchFilesState","filesWithNewState","existingFilesState","fromEntries","entries","map","_ref","fileID","newFileState","Error","onMissingKey","key","translator","translate","i18nArray","translateArray","setOptions","newOpts","setMeta","undefined","resetProgress","defaultProgress","uploadComplete","uploadStarted","updatedFiles","keys","forEach","clear","addPreProcessor","fn","add","removePreProcessor","delete","addPostProcessor","removePostProcessor","addUploader","removeUploader","updatedMeta","setFileMeta","newMeta","getFiles","values","getFilesByIds","ids","getObjectOfFilesPerState","filesObject","inProgressFiles","newFiles","startedFiles","uploadStartedFiles","pausedFiles","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","push","isPaused","preprocess","postprocess","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","validateSingleFile","err","message","validateAggregateRestrictions","existingFiles","checkIfFileAlreadyExists","addFile","nextFilesState","validFilesToAdd","errors","restrictionErrors","filter","isRestriction","firstValidFileToAdd","name","type","addFiles","fileDescriptors","nonRestrictionErrors","subError","smart_count","details","AggregateError","removeFiles","fileIDs","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","uploadID","newFileIDs","stateUpdate","removedFileIDs","join","removeFile","pauseResume","wasPaused","pauseAll","inProgressUpdatedFiles","updatedFile","resumeAll","retryAll","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","retryUpload","logout","_provider","provider","inProgress","sizedFiles","unsizedFiles","progressMax","currentProgress","reduce","acc","totalSize","_file$progress$bytesT","averageSize","uploadedSize","_window$navigator$onL","online","navigator","onLine","getID","use","Plugin","msg","TypeError","_len2","_key2","pluginId","existsPluginAlready","getPlugin","install","foundPlugin","find","Symbol","for","method","flat","removePlugin","instance","uninstall","list","index","findIndex","item","splice","updatedState","destroy","removeEventListener","hideInfo","slice","duration","isComplexMessage","setTimeout","warn","registerRequestClient","client","set","getRequestClientForFile","remote","requestClient","get","requestClientId","restore","reject","addResultData","currentUpload","result","upload","_classPrivateFieldLoo","onBeforeUploadResult","then","validateMinNumberOfFiles","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","userFacingErrors","isUserFacing","maxNumToShow","firstErrors","additionalErrors","_ref2","count","missingFields","getMissingRequiredMetaFields","missingRequiredMetaFields","success","fileDescriptorOrFile","File","size","fileType","fileName","fileExtension","extension","source","isRemote","preview","stack","filesToAdd","fileToAdd","_existingFiles$newFil","newFile","existingFileState","onBeforeFileAddedResult","_newFile$name","errorHandler","response","errorMsg","_file$name","newError","uploadStalledWarningRecentlyEmitted","trim","onUploadStarted","filesFiltered","exists","filesState","Date","now","uploadResp","mode","uploadURL","addEventListener","allowMultipleUploads","step","getCurrentUpload","steps","version"],"sources":["Uppy.ts"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n/* global AggregateError */\n\nimport type { h } from 'preact'\nimport Translator from '@uppy/utils/lib/Translator'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore untyped\nimport ee from 'namespace-emitter'\nimport { nanoid } from 'nanoid/non-secure'\nimport throttle from 'lodash/throttle.js'\nimport DefaultStore, { type Store } from '@uppy/store-default'\nimport getFileType from '@uppy/utils/lib/getFileType'\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension'\nimport { getSafeFileId } from '@uppy/utils/lib/generateFileID'\nimport type {\n  UppyFile,\n  Meta,\n  Body,\n  MinimalRequiredUppyFile,\n} from '@uppy/utils/lib/UppyFile'\nimport type { CompanionFile } from '@uppy/utils/lib/CompanionFile'\nimport type {\n  CompanionClientProvider,\n  CompanionClientSearchProvider,\n} from '@uppy/utils/lib/CompanionClientProvider'\nimport type {\n  FileProgressNotStarted,\n  FileProgressStarted,\n} from '@uppy/utils/lib/FileProgress'\nimport type {\n  Locale,\n  I18n,\n  OptionalPluralizeLocale,\n} from '@uppy/utils/lib/Translator'\nimport supportsUploadProgress from './supportsUploadProgress.ts'\nimport getFileName from './getFileName.ts'\nimport { justErrorsLogger, debugLogger } from './loggers.ts'\nimport {\n  Restricter,\n  defaultOptions as defaultRestrictionOptions,\n  RestrictionError,\n} from './Restricter.ts'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\nimport locale from './locale.ts'\n\nimport type BasePlugin from './BasePlugin.ts'\nimport type { Restrictions, ValidateableFile } from './Restricter.ts'\n\ntype Processor = (\n  fileIDs: string[],\n  uploadID: string,\n) => Promise<unknown> | void\n\ntype LogLevel = 'info' | 'warning' | 'error' | 'success'\n\nexport type UnknownPlugin<\n  M extends Meta,\n  B extends Body,\n  PluginState extends Record<string, unknown> = Record<string, unknown>,\n> = BasePlugin<any, M, B, PluginState>\n\n/**\n * ids are always `string`s, except the root folder's id can be `null`\n */\nexport type PartialTreeId = string | null\n\nexport type PartialTreeStatusFile = 'checked' | 'unchecked'\nexport type PartialTreeStatus = PartialTreeStatusFile | 'partial'\n\nexport type PartialTreeFile = {\n  type: 'file'\n  id: string\n\n  /**\n   * There exist two types of restrictions:\n   * - individual restrictions (`allowedFileTypes`, `minFileSize`, `maxFileSize`), and\n   * - aggregate restrictions (`maxNumberOfFiles`, `maxTotalFileSize`).\n   *\n   * `.restrictionError` reports whether this file passes individual restrictions.\n   *\n   */\n  restrictionError: string | null\n\n  status: PartialTreeStatusFile\n  parentId: PartialTreeId\n  data: CompanionFile\n}\n\nexport type PartialTreeFolderNode = {\n  type: 'folder'\n  id: string\n\n  /**\n   * Consider `(.nextPagePath, .cached)` a composite key that can represent 4 states:\n   * - `{ cached: true, nextPagePath: null }` - we fetched all pages in this folder\n   * - `{ cached: true, nextPagePath: 'smth' }` - we fetched 1st page, and there are still pages left to fetch in this folder\n   * - `{ cached: false, nextPagePath: null }` - we didn't fetch the 1st page in this folder\n   * - `{ cached: false, nextPagePath: 'someString' }` - ❌ CAN'T HAPPEN ❌\n   */\n  cached: boolean\n  nextPagePath: PartialTreeId\n\n  status: PartialTreeStatus\n  parentId: PartialTreeId\n  data: CompanionFile\n}\n\nexport type PartialTreeFolderRoot = {\n  type: 'root'\n  id: PartialTreeId\n\n  cached: boolean\n  nextPagePath: PartialTreeId\n}\n\nexport type PartialTreeFolder = PartialTreeFolderNode | PartialTreeFolderRoot\n\n/**\n * PartialTree has the following structure.\n *\n *           FolderRoot\n *         ┌─────┴─────┐\n *     FolderNode     File\n *   ┌─────┴────┐\n *  File      File\n *\n * Root folder is called `PartialTreeFolderRoot`,\n * all other folders are called `PartialTreeFolderNode`, because they are \"internal nodes\".\n *\n * It's possible for `PartialTreeFolderNode` to be a leaf node if it doesn't contain any files.\n */\nexport type PartialTree = (PartialTreeFile | PartialTreeFolder)[]\n\nexport type UnknownProviderPluginState = {\n  authenticated: boolean | undefined\n  didFirstRender: boolean\n  searchString: string\n  loading: boolean | string\n  partialTree: PartialTree\n  currentFolderId: PartialTreeId\n  username: string | null\n}\n/*\n * UnknownProviderPlugin can be any Companion plugin (such as Google Drive).\n * As the plugins are passed around throughout Uppy we need a generic type for this.\n * It may seems like duplication, but this type safe. Changing the type of `storage`\n * will error in the `Provider` class of @uppy/companion-client and vice versa.\n *\n * Note that this is the *plugin* class, not a version of the `Provider` class.\n * `Provider` does operate on Companion plugins with `uppy.getPlugin()`.\n */\nexport type UnknownProviderPlugin<\n  M extends Meta,\n  B extends Body,\n> = UnknownPlugin<M, B, UnknownProviderPluginState> & {\n  title: string\n  rootFolderId: string | null\n  files: UppyFile<M, B>[]\n  icon: () => h.JSX.Element\n  provider: CompanionClientProvider\n  storage: {\n    getItem: (key: string) => Promise<string | null>\n    setItem: (key: string, value: string) => Promise<void>\n    removeItem: (key: string) => Promise<void>\n  }\n}\n\n/*\n * UnknownSearchProviderPlugin can be any search Companion plugin (such as Unsplash).\n * As the plugins are passed around throughout Uppy we need a generic type for this.\n * It may seems like duplication, but this type safe. Changing the type of `title`\n * will error in the `SearchProvider` class of @uppy/companion-client and vice versa.\n *\n * Note that this is the *plugin* class, not a version of the `SearchProvider` class.\n * `SearchProvider` does operate on Companion plugins with `uppy.getPlugin()`.\n */\nexport type UnknownSearchProviderPluginState = {\n  isInputMode: boolean\n} & Pick<\n  UnknownProviderPluginState,\n  'loading' | 'searchString' | 'partialTree' | 'currentFolderId'\n>\nexport type UnknownSearchProviderPlugin<\n  M extends Meta,\n  B extends Body,\n> = UnknownPlugin<M, B, UnknownSearchProviderPluginState> & {\n  title: string\n  icon: () => h.JSX.Element\n  provider: CompanionClientSearchProvider\n}\n\nexport interface UploadResult<M extends Meta, B extends Body> {\n  successful?: UppyFile<M, B>[]\n  failed?: UppyFile<M, B>[]\n  uploadID?: string\n  [key: string]: unknown\n}\n\ninterface CurrentUpload<M extends Meta, B extends Body> {\n  fileIDs: string[]\n  step: number\n  result: UploadResult<M, B>\n}\n\n// TODO: can we use namespaces in other plugins to populate this?\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface Plugins extends Record<string, Record<string, unknown> | undefined> {}\n\nexport interface State<M extends Meta, B extends Body>\n  extends Record<string, unknown> {\n  meta: M\n  capabilities: {\n    uploadProgress: boolean\n    individualCancellation: boolean\n    resumableUploads: boolean\n    isMobileDevice?: boolean\n    darkMode?: boolean\n  }\n  currentUploads: Record<string, CurrentUpload<M, B>>\n  allowNewUpload: boolean\n  recoveredState: null | Required<Pick<State<M, B>, 'files' | 'currentUploads'>>\n  error: string | null\n  files: {\n    [key: string]: UppyFile<M, B>\n  }\n  info: Array<{\n    isHidden?: boolean\n    type: LogLevel\n    message: string\n    details?: string | Record<string, string> | null\n  }>\n  plugins: Plugins\n  totalProgress: number\n  companion?: Record<string, string>\n}\n\nexport interface UppyOptions<M extends Meta, B extends Body> {\n  id?: string\n  autoProceed?: boolean\n  /**\n   * @deprecated Use allowMultipleUploadBatches\n   */\n  allowMultipleUploads?: boolean\n  allowMultipleUploadBatches?: boolean\n  logger?: typeof debugLogger\n  debug?: boolean\n  restrictions: Restrictions\n  meta?: M\n  onBeforeFileAdded?: (\n    currentFile: UppyFile<M, B>,\n    files: { [key: string]: UppyFile<M, B> },\n  ) => UppyFile<M, B> | boolean | undefined\n  onBeforeUpload?: (files: {\n    [key: string]: UppyFile<M, B>\n  }) => { [key: string]: UppyFile<M, B> } | boolean\n  locale?: Locale\n  store?: Store<State<M, B>>\n  infoTimeout?: number\n}\n\nexport interface UppyOptionsWithOptionalRestrictions<\n  M extends Meta,\n  B extends Body,\n> extends Omit<UppyOptions<M, B>, 'restrictions'> {\n  restrictions?: Partial<Restrictions>\n}\n\n// The user facing type for UppyOptions used in uppy.setOptions()\ntype MinimalRequiredOptions<M extends Meta, B extends Body> = Partial<\n  Omit<UppyOptions<M, B>, 'locale' | 'meta' | 'restrictions'> & {\n    locale: OptionalPluralizeLocale\n    meta: Partial<M>\n    restrictions: Partial<Restrictions>\n  }\n>\n\nexport type NonNullableUppyOptions<M extends Meta, B extends Body> = Required<\n  UppyOptions<M, B>\n>\n\nexport interface _UppyEventMap<M extends Meta, B extends Body> {\n  'back-online': () => void\n  'cancel-all': () => void\n  complete: (result: UploadResult<M, B>) => void\n  error: (\n    error: { name: string; message: string; details?: string },\n    file?: UppyFile<M, B>,\n    response?: UppyFile<M, B>['response'],\n  ) => void\n  'file-added': (file: UppyFile<M, B>) => void\n  'file-removed': (file: UppyFile<M, B>) => void\n  'files-added': (files: UppyFile<M, B>[]) => void\n  'info-hidden': () => void\n  'info-visible': () => void\n  'is-offline': () => void\n  'is-online': () => void\n  'pause-all': () => void\n  'plugin-added': (plugin: UnknownPlugin<any, any>) => void\n  'plugin-remove': (plugin: UnknownPlugin<any, any>) => void\n  'postprocess-complete': (\n    file: UppyFile<M, B> | undefined,\n    progress?: NonNullable<FileProgressStarted['preprocess']>,\n  ) => void\n  'postprocess-progress': (\n    file: UppyFile<M, B> | undefined,\n    progress: NonNullable<FileProgressStarted['postprocess']>,\n  ) => void\n  'preprocess-complete': (\n    file: UppyFile<M, B> | undefined,\n    progress?: NonNullable<FileProgressStarted['preprocess']>,\n  ) => void\n  'preprocess-progress': (\n    file: UppyFile<M, B> | undefined,\n    progress: NonNullable<FileProgressStarted['preprocess']>,\n  ) => void\n  progress: (progress: number) => void\n  restored: (pluginData: any) => void\n  'restore-confirmed': () => void\n  'restore-canceled': () => void\n  'restriction-failed': (file: UppyFile<M, B> | undefined, error: Error) => void\n  'resume-all': () => void\n  'retry-all': (files: UppyFile<M, B>[]) => void\n  'state-update': (\n    prevState: State<M, B>,\n    nextState: State<M, B>,\n    patch?: Partial<State<M, B>>,\n  ) => void\n  upload: (uploadID: string, files: UppyFile<M, B>[]) => void\n  'upload-error': (\n    file: UppyFile<M, B> | undefined,\n    error: { name: string; message: string; details?: string },\n    response?:\n      | Omit<NonNullable<UppyFile<M, B>['response']>, 'uploadURL'>\n      | undefined,\n  ) => void\n  'upload-pause': (file: UppyFile<M, B> | undefined, isPaused: boolean) => void\n  'upload-progress': (\n    file: UppyFile<M, B> | undefined,\n    progress: FileProgressStarted,\n  ) => void\n  'upload-retry': (file: UppyFile<M, B>) => void\n  'upload-stalled': (\n    error: { message: string; details?: string },\n    files: UppyFile<M, B>[],\n  ) => void\n  'upload-success': (\n    file: UppyFile<M, B> | undefined,\n    response: NonNullable<UppyFile<M, B>['response']>,\n  ) => void\n}\n\nexport interface UppyEventMap<M extends Meta, B extends Body>\n  extends _UppyEventMap<M, B> {\n  'upload-start': (files: UppyFile<M, B>[]) => void\n}\n\n/** `OmitFirstArg<typeof someArray>` is the type of the returned value of `someArray.slice(1)`. */\ntype OmitFirstArg<T> = T extends [any, ...infer U] ? U : never\n\nconst defaultUploadState = {\n  totalProgress: 0,\n  allowNewUpload: true,\n  error: null,\n  recoveredState: null,\n}\n\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\nexport class Uppy<\n  M extends Meta = Meta,\n  B extends Body = Record<string, never>,\n> {\n  static VERSION = packageJson.version\n\n  #plugins: Record<string, UnknownPlugin<M, B>[]> = Object.create(null)\n\n  #restricter\n\n  #storeUnsubscribe\n\n  #emitter = ee()\n\n  #preProcessors: Set<Processor> = new Set()\n\n  #uploaders: Set<Processor> = new Set()\n\n  #postProcessors: Set<Processor> = new Set()\n\n  defaultLocale: Locale\n\n  locale!: Locale\n\n  // The user optionally passes in options, but we set defaults for missing options.\n  // We consider all options present after the contructor has run.\n  opts: NonNullableUppyOptions<M, B>\n\n  store: NonNullableUppyOptions<M, B>['store']\n\n  i18n!: I18n\n\n  i18nArray!: Translator['translateArray']\n\n  scheduledAutoProceed: ReturnType<typeof setTimeout> | null = null\n\n  wasOffline = false\n\n  /**\n   * Instantiate Uppy\n   */\n  constructor(opts?: UppyOptionsWithOptionalRestrictions<M, B>) {\n    this.defaultLocale = locale as any as Locale\n\n    const defaultOptions: UppyOptions<Record<string, unknown>, B> = {\n      id: 'uppy',\n      autoProceed: false,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: defaultRestrictionOptions,\n      meta: {},\n      onBeforeFileAdded: (file, files) => !Object.hasOwn(files, file.id),\n      onBeforeUpload: (files) => files,\n      store: new DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000,\n    }\n\n    const merged = { ...defaultOptions, ...opts } as Omit<\n      NonNullableUppyOptions<M, B>,\n      'restrictions'\n    >\n    // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n    this.opts = {\n      ...merged,\n      restrictions: {\n        ...(defaultOptions.restrictions as Restrictions),\n        ...(opts && opts.restrictions),\n      },\n    }\n\n    // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n    if (opts && opts.logger && opts.debug) {\n      this.log(\n        'You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.',\n        'warning',\n      )\n    } else if (opts && opts.debug) {\n      this.opts.logger = debugLogger\n    }\n\n    this.log(`Using Core v${Uppy.VERSION}`)\n\n    this.i18nInit()\n\n    this.store = this.opts.store\n    this.setState({\n      ...defaultUploadState,\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false,\n      },\n      meta: { ...this.opts.meta },\n      info: [],\n    })\n\n    this.#restricter = new Restricter<M, B>(\n      () => this.opts,\n      () => this.i18n,\n    )\n\n    this.#storeUnsubscribe = this.store.subscribe(\n      (prevState, nextState, patch) => {\n        this.emit('state-update', prevState, nextState, patch)\n        this.updateAll(nextState)\n      },\n    )\n\n    // Exposing uppy object on window for debugging and testing\n    if (this.opts.debug && typeof window !== 'undefined') {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore Mutating the global object for debug purposes\n      window[this.opts.id] = this\n    }\n\n    this.#addListeners()\n  }\n\n  emit<T extends keyof UppyEventMap<M, B>>(\n    event: T,\n    ...args: Parameters<UppyEventMap<M, B>[T]>\n  ): void {\n    this.#emitter.emit(event, ...args)\n  }\n\n  on<K extends keyof UppyEventMap<M, B>>(\n    event: K,\n    callback: UppyEventMap<M, B>[K],\n  ): this {\n    this.#emitter.on(event, callback)\n    return this\n  }\n\n  once<K extends keyof UppyEventMap<M, B>>(\n    event: K,\n    callback: UppyEventMap<M, B>[K],\n  ): this {\n    this.#emitter.once(event, callback)\n    return this\n  }\n\n  off<K extends keyof UppyEventMap<M, B>>(\n    event: K,\n    callback: UppyEventMap<M, B>[K],\n  ): this {\n    this.#emitter.off(event, callback)\n    return this\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n  updateAll(state: Partial<State<M, B>>): void {\n    this.iteratePlugins((plugin: UnknownPlugin<M, B>) => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state with a patch\n   */\n  setState(patch?: Partial<State<M, B>>): void {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state.\n   */\n  getState(): State<M, B> {\n    return this.store.getState()\n  }\n\n  patchFilesState(filesWithNewState: {\n    [id: string]: Partial<UppyFile<M, B>>\n  }): void {\n    const existingFilesState = this.getState().files\n\n    this.setState({\n      files: {\n        ...existingFilesState,\n        ...Object.fromEntries(\n          Object.entries(filesWithNewState).map(([fileID, newFileState]) => [\n            fileID,\n            {\n              ...existingFilesState[fileID],\n              ...newFileState,\n            },\n          ]),\n        ),\n      },\n    })\n  }\n\n  /**\n   * Shorthand to set state for a specific file.\n   */\n  setFileState(fileID: string, state: Partial<UppyFile<M, B>>): void {\n    if (!this.getState().files[fileID]) {\n      throw new Error(\n        `Can’t set state for ${fileID} (the file could have been removed)`,\n      )\n    }\n\n    this.patchFilesState({ [fileID]: state })\n  }\n\n  i18nInit(): void {\n    const onMissingKey = (key: string): void =>\n      this.log(`Missing i18n string: ${key}`, 'error')\n    const translator = new Translator([this.defaultLocale, this.opts.locale], {\n      onMissingKey,\n    })\n    this.i18n = translator.translate.bind(translator)\n    this.i18nArray = translator.translateArray.bind(translator)\n    this.locale = translator.locale\n  }\n\n  setOptions(newOpts: MinimalRequiredOptions<M, B>): void {\n    this.opts = {\n      ...this.opts,\n      ...(newOpts as UppyOptions<M, B>),\n      restrictions: {\n        ...this.opts.restrictions,\n        ...(newOpts?.restrictions as Restrictions),\n      },\n    }\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta)\n    }\n\n    this.i18nInit()\n\n    if (newOpts.locale) {\n      this.iteratePlugins((plugin) => {\n        plugin.setOptions(newOpts)\n      })\n    }\n\n    // Note: this is not the preact `setState`, it's an internal function that has the same name.\n    this.setState(undefined) // so that UI re-renders with new options\n  }\n\n  resetProgress(): void {\n    const defaultProgress: Omit<FileProgressNotStarted, 'bytesTotal'> = {\n      percentage: 0,\n      bytesUploaded: false,\n      uploadComplete: false,\n      uploadStarted: null,\n    }\n    const files = { ...this.getState().files }\n    const updatedFiles: State<M, B>['files'] = Object.create(null)\n\n    Object.keys(files).forEach((fileID) => {\n      updatedFiles[fileID] = {\n        ...files[fileID],\n        progress: {\n          ...files[fileID].progress,\n          ...defaultProgress,\n        },\n      }\n    })\n\n    this.setState({ files: updatedFiles, ...defaultUploadState })\n  }\n\n  clear(): void {\n    const { capabilities, currentUploads } = this.getState()\n    if (\n      Object.keys(currentUploads).length > 0 &&\n      !capabilities.individualCancellation\n    ) {\n      throw new Error(\n        'The installed uploader plugin does not allow removing files during an upload.',\n      )\n    }\n\n    this.setState({ ...defaultUploadState, files: {} })\n  }\n\n  addPreProcessor(fn: Processor): void {\n    this.#preProcessors.add(fn)\n  }\n\n  removePreProcessor(fn: Processor): boolean {\n    return this.#preProcessors.delete(fn)\n  }\n\n  addPostProcessor(fn: Processor): void {\n    this.#postProcessors.add(fn)\n  }\n\n  removePostProcessor(fn: Processor): boolean {\n    return this.#postProcessors.delete(fn)\n  }\n\n  addUploader(fn: Processor): void {\n    this.#uploaders.add(fn)\n  }\n\n  removeUploader(fn: Processor): boolean {\n    return this.#uploaders.delete(fn)\n  }\n\n  setMeta(data: Partial<M>): void {\n    const updatedMeta = { ...this.getState().meta, ...data }\n    const updatedFiles = { ...this.getState().files }\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = {\n        ...updatedFiles[fileID],\n        meta: { ...updatedFiles[fileID].meta, ...data },\n      }\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles,\n    })\n  }\n\n  setFileMeta(fileID: string, data: State<M, B>['meta']): void {\n    const updatedFiles = { ...this.getState().files }\n    if (!updatedFiles[fileID]) {\n      this.log(\n        'Was trying to set metadata for a file that has been removed: ',\n        fileID,\n      )\n      return\n    }\n    const newMeta = { ...updatedFiles[fileID].meta, ...data }\n    updatedFiles[fileID] = { ...updatedFiles[fileID], meta: newMeta }\n    this.setState({ files: updatedFiles })\n  }\n\n  /**\n   * Get a file object.\n   */\n  getFile(fileID: string): UppyFile<M, B> {\n    return this.getState().files[fileID]\n  }\n\n  /**\n   * Get all files in an array.\n   */\n  getFiles(): UppyFile<M, B>[] {\n    const { files } = this.getState()\n    return Object.values(files)\n  }\n\n  getFilesByIds(ids: string[]): UppyFile<M, B>[] {\n    return ids.map((id) => this.getFile(id))\n  }\n\n  getObjectOfFilesPerState(): {\n    newFiles: UppyFile<M, B>[]\n    startedFiles: UppyFile<M, B>[]\n    uploadStartedFiles: UppyFile<M, B>[]\n    pausedFiles: UppyFile<M, B>[]\n    completeFiles: UppyFile<M, B>[]\n    erroredFiles: UppyFile<M, B>[]\n    inProgressFiles: UppyFile<M, B>[]\n    inProgressNotPausedFiles: UppyFile<M, B>[]\n    processingFiles: UppyFile<M, B>[]\n    isUploadStarted: boolean\n    isAllComplete: boolean\n    isAllErrored: boolean\n    isAllPaused: boolean\n    isUploadInProgress: boolean\n    isSomeGhost: boolean\n  } {\n    const { files: filesObject, totalProgress, error } = this.getState()\n    const files = Object.values(filesObject)\n\n    const inProgressFiles: UppyFile<M, B>[] = []\n    const newFiles: UppyFile<M, B>[] = []\n    const startedFiles: UppyFile<M, B>[] = []\n    const uploadStartedFiles: UppyFile<M, B>[] = []\n    const pausedFiles: UppyFile<M, B>[] = []\n    const completeFiles: UppyFile<M, B>[] = []\n    const erroredFiles: UppyFile<M, B>[] = []\n    const inProgressNotPausedFiles: UppyFile<M, B>[] = []\n    const processingFiles: UppyFile<M, B>[] = []\n\n    for (const file of files) {\n      const { progress } = file\n\n      if (!progress.uploadComplete && progress.uploadStarted) {\n        inProgressFiles.push(file)\n        if (!file.isPaused) {\n          inProgressNotPausedFiles.push(file)\n        }\n      }\n      if (!progress.uploadStarted) {\n        newFiles.push(file)\n      }\n      if (\n        progress.uploadStarted ||\n        progress.preprocess ||\n        progress.postprocess\n      ) {\n        startedFiles.push(file)\n      }\n      if (progress.uploadStarted) {\n        uploadStartedFiles.push(file)\n      }\n      if (file.isPaused) {\n        pausedFiles.push(file)\n      }\n      if (progress.uploadComplete) {\n        completeFiles.push(file)\n      }\n      if (file.error) {\n        erroredFiles.push(file)\n      }\n      if (progress.preprocess || progress.postprocess) {\n        processingFiles.push(file)\n      }\n    }\n\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete:\n        totalProgress === 100 &&\n        completeFiles.length === files.length &&\n        processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused:\n        inProgressFiles.length !== 0 &&\n        pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some((file) => file.isGhost),\n    }\n  }\n\n  #informAndEmit(\n    errors: {\n      name: string\n      message: string\n      isUserFacing?: boolean\n      details?: string\n      isRestriction?: boolean\n      file?: UppyFile<M, B>\n    }[],\n  ): void {\n    for (const error of errors) {\n      if (error.isRestriction) {\n        this.emit(\n          'restriction-failed',\n          error.file,\n          error as RestrictionError<M, B>,\n        )\n      } else {\n        this.emit('error', error, error.file)\n      }\n      this.log(error, 'warning')\n    }\n\n    const userFacingErrors = errors.filter((error) => error.isUserFacing)\n\n    // don't flood the user: only show the first 4 toasts\n    const maxNumToShow = 4\n    const firstErrors = userFacingErrors.slice(0, maxNumToShow)\n    const additionalErrors = userFacingErrors.slice(maxNumToShow)\n    firstErrors.forEach(({ message, details = '' }) => {\n      this.info({ message, details }, 'error', this.opts.infoTimeout)\n    })\n\n    if (additionalErrors.length > 0) {\n      this.info({\n        message: this.i18n('additionalRestrictionsFailed', {\n          count: additionalErrors.length,\n        }),\n      })\n    }\n  }\n\n  validateSingleFile(file: ValidateableFile<M, B>): string | null {\n    try {\n      this.#restricter.validateSingleFile(file)\n    } catch (err) {\n      return err.message\n    }\n    return null\n  }\n\n  validateAggregateRestrictions(\n    files: ValidateableFile<M, B>[],\n  ): string | null {\n    const existingFiles = this.getFiles()\n    try {\n      this.#restricter.validateAggregateRestrictions(existingFiles, files)\n    } catch (err) {\n      return err.message\n    }\n    return null\n  }\n\n  #checkRequiredMetaFieldsOnFile(file: UppyFile<M, B>): boolean {\n    const { missingFields, error } =\n      this.#restricter.getMissingRequiredMetaFields(file)\n\n    if (missingFields.length > 0) {\n      this.setFileState(file.id, { missingRequiredMetaFields: missingFields })\n      this.log(error.message)\n      this.emit('restriction-failed', file, error)\n      return false\n    }\n    return true\n  }\n\n  #checkRequiredMetaFields(files: State<M, B>['files']): boolean {\n    let success = true\n    for (const file of Object.values(files)) {\n      if (!this.#checkRequiredMetaFieldsOnFile(file)) {\n        success = false\n      }\n    }\n    return success\n  }\n\n  #assertNewUploadAllowed(file?: UppyFile<M, B>): void {\n    const { allowNewUpload } = this.getState()\n\n    if (allowNewUpload === false) {\n      const error = new RestrictionError<M, B>(\n        this.i18n('noMoreFilesAllowed'),\n        {\n          file,\n        },\n      )\n      this.#informAndEmit([error])\n      throw error\n    }\n  }\n\n  checkIfFileAlreadyExists(fileID: string): boolean {\n    const { files } = this.getState()\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   */\n  #transformFile(fileDescriptorOrFile: File | UppyFile<M, B>): UppyFile<M, B> {\n    // Uppy expects files in { name, type, size, data } format.\n    // If the actual File object is passed from input[type=file] or drag-drop,\n    // we normalize it to match Uppy file object\n    const file = (\n      fileDescriptorOrFile instanceof File ?\n        {\n          name: fileDescriptorOrFile.name,\n          type: fileDescriptorOrFile.type,\n          size: fileDescriptorOrFile.size,\n          data: fileDescriptorOrFile,\n        }\n      : fileDescriptorOrFile) as UppyFile<M, B>\n\n    const fileType = getFileType(file)\n    const fileName = getFileName(fileType, file)\n    const fileExtension = getFileNameAndExtension(fileName).extension\n    const id = getSafeFileId(file, this.getID())\n\n    const meta = file.meta || {}\n    meta.name = fileName\n    meta.type = fileType\n\n    // `null` means the size is unknown.\n    const size =\n      Number.isFinite(file.data.size) ? file.data.size : (null as never)\n\n    return {\n      source: file.source || '',\n      id,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: {\n        ...this.getState().meta,\n        ...meta,\n      },\n      type: fileType,\n      data: file.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: false,\n        bytesTotal: size,\n        uploadComplete: false,\n        uploadStarted: null,\n      },\n      size,\n      isGhost: false,\n      isRemote: file.isRemote || false,\n      remote: file.remote,\n      preview: file.preview,\n    }\n  }\n\n  // Schedule an upload if `autoProceed` is enabled.\n  #startIfAutoProceed(): void {\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(() => {\n        this.scheduledAutoProceed = null\n        this.upload().catch((err) => {\n          if (!err.isRestriction) {\n            this.log(err.stack || err.message || err)\n          }\n        })\n      }, 4)\n    }\n  }\n\n  #checkAndUpdateFileState(filesToAdd: UppyFile<M, B>[]): {\n    nextFilesState: State<M, B>['files']\n    validFilesToAdd: UppyFile<M, B>[]\n    errors: RestrictionError<M, B>[]\n  } {\n    const { files: existingFiles } = this.getState()\n\n    // create a copy of the files object only once\n    const nextFilesState = { ...existingFiles }\n    const validFilesToAdd: UppyFile<M, B>[] = []\n    const errors: RestrictionError<M, B>[] = []\n\n    for (const fileToAdd of filesToAdd) {\n      try {\n        let newFile = this.#transformFile(fileToAdd)\n\n        // If a file has been recovered (Golden Retriever), but we were unable to recover its data (probably too large),\n        // users are asked to re-select these half-recovered files and then this method will be called again.\n        // In order to keep the progress, meta and everything else, we keep the existing file,\n        // but we replace `data`, and we remove `isGhost`, because the file is no longer a ghost now\n        const isGhost = existingFiles[newFile.id]?.isGhost\n        if (isGhost) {\n          const existingFileState = existingFiles[newFile.id]\n          newFile = {\n            ...existingFileState,\n            isGhost: false,\n            data: fileToAdd.data,\n          }\n          this.log(\n            `Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`,\n          )\n        }\n\n        const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(\n          newFile,\n          nextFilesState,\n        )\n\n        if (\n          !onBeforeFileAddedResult &&\n          this.checkIfFileAlreadyExists(newFile.id)\n        ) {\n          throw new RestrictionError(\n            this.i18n('noDuplicates', {\n              fileName: newFile.name ?? this.i18n('unnamed'),\n            }),\n            { file: fileToAdd },\n          )\n        }\n\n        // Pass through reselected files from Golden Retriever\n        if (onBeforeFileAddedResult === false && !isGhost) {\n          // Don’t show UI info for this error, as it should be done by the developer\n          throw new RestrictionError(\n            'Cannot add the file because onBeforeFileAdded returned false.',\n            { isUserFacing: false, file: fileToAdd },\n          )\n        } else if (\n          typeof onBeforeFileAddedResult === 'object' &&\n          onBeforeFileAddedResult !== null\n        ) {\n          newFile = onBeforeFileAddedResult\n        }\n\n        this.#restricter.validateSingleFile(newFile)\n\n        // need to add it to the new local state immediately, so we can use the state to validate the next files too\n        nextFilesState[newFile.id] = newFile\n        validFilesToAdd.push(newFile)\n      } catch (err) {\n        errors.push(err as any)\n      }\n    }\n\n    try {\n      // need to run this separately because it's much more slow, so if we run it inside the for-loop it will be very slow\n      // when many files are added\n      this.#restricter.validateAggregateRestrictions(\n        Object.values(existingFiles),\n        validFilesToAdd,\n      )\n    } catch (err) {\n      errors.push(err as any)\n\n      // If we have any aggregate error, don't allow adding this batch\n      return {\n        nextFilesState: existingFiles,\n        validFilesToAdd: [],\n        errors,\n      }\n    }\n\n    return {\n      nextFilesState,\n      validFilesToAdd,\n      errors,\n    }\n  }\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   */\n  addFile(file: File | MinimalRequiredUppyFile<M, B>): UppyFile<M, B>['id'] {\n    this.#assertNewUploadAllowed(file as UppyFile<M, B>)\n\n    const { nextFilesState, validFilesToAdd, errors } =\n      this.#checkAndUpdateFileState([file as UppyFile<M, B>])\n\n    const restrictionErrors = errors.filter((error) => error.isRestriction)\n    this.#informAndEmit(restrictionErrors)\n\n    if (errors.length > 0) throw errors[0]\n\n    this.setState({ files: nextFilesState })\n\n    const [firstValidFileToAdd] = validFilesToAdd\n\n    this.emit('file-added', firstValidFileToAdd)\n    this.emit('files-added', validFilesToAdd)\n    this.log(\n      `Added file: ${firstValidFileToAdd.name}, ${firstValidFileToAdd.id}, mime type: ${firstValidFileToAdd.type}`,\n    )\n\n    this.#startIfAutoProceed()\n\n    return firstValidFileToAdd.id\n  }\n\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n  addFiles(fileDescriptors: MinimalRequiredUppyFile<M, B>[]): void {\n    this.#assertNewUploadAllowed()\n\n    const { nextFilesState, validFilesToAdd, errors } =\n      this.#checkAndUpdateFileState(fileDescriptors as UppyFile<M, B>[])\n\n    const restrictionErrors = errors.filter((error) => error.isRestriction)\n    this.#informAndEmit(restrictionErrors)\n\n    const nonRestrictionErrors = errors.filter((error) => !error.isRestriction)\n\n    if (nonRestrictionErrors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n'\n      nonRestrictionErrors.forEach((subError) => {\n        message += `\\n * ${subError.message}`\n      })\n\n      this.info(\n        {\n          message: this.i18n('addBulkFilesFailed', {\n            smart_count: nonRestrictionErrors.length,\n          }),\n          details: message,\n        },\n        'error',\n        this.opts.infoTimeout,\n      )\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(nonRestrictionErrors, message)\n      } else {\n        const err = new Error(message)\n        // @ts-expect-error fallback when AggregateError is not available\n        err.errors = nonRestrictionErrors\n        throw err\n      }\n    }\n\n    // OK, we haven't thrown an error, we can start updating state and emitting events now:\n\n    this.setState({ files: nextFilesState })\n\n    validFilesToAdd.forEach((file) => {\n      this.emit('file-added', file)\n    })\n\n    this.emit('files-added', validFilesToAdd)\n\n    if (validFilesToAdd.length > 5) {\n      this.log(`Added batch of ${validFilesToAdd.length} files`)\n    } else {\n      Object.values(validFilesToAdd).forEach((file) => {\n        this.log(\n          `Added file: ${file.name}\\n id: ${file.id}\\n type: ${file.type}`,\n        )\n      })\n    }\n\n    if (validFilesToAdd.length > 0) {\n      this.#startIfAutoProceed()\n    }\n  }\n\n  removeFiles(fileIDs: string[]): void {\n    const { files, currentUploads } = this.getState()\n    const updatedFiles = { ...files }\n    const updatedUploads = { ...currentUploads }\n\n    const removedFiles = Object.create(null)\n    fileIDs.forEach((fileID) => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID]\n        delete updatedFiles[fileID]\n      }\n    })\n\n    // Remove files from the `fileIDs` list in each upload.\n    function fileIsNotRemoved(uploadFileID: string): boolean {\n      return removedFiles[uploadFileID] === undefined\n    }\n\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs =\n        currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved)\n\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID]\n        return\n      }\n\n      const { capabilities } = this.getState()\n      if (\n        newFileIDs.length !== currentUploads[uploadID].fileIDs.length &&\n        !capabilities.individualCancellation\n      ) {\n        throw new Error(\n          'The installed uploader plugin does not allow removing files during an upload.',\n        )\n      }\n\n      updatedUploads[uploadID] = {\n        ...currentUploads[uploadID],\n        fileIDs: newFileIDs,\n      }\n    })\n\n    const stateUpdate: Partial<State<M, B>> = {\n      currentUploads: updatedUploads,\n      files: updatedFiles,\n    }\n\n    // If all files were removed - allow new uploads,\n    // and clear recoveredState\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true\n      stateUpdate.error = null\n      stateUpdate.recoveredState = null\n    }\n\n    this.setState(stateUpdate)\n    this.calculateTotalProgress()\n\n    const removedFileIDs = Object.keys(removedFiles)\n    removedFileIDs.forEach((fileID) => {\n      this.emit('file-removed', removedFiles[fileID])\n    })\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`)\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`)\n    }\n  }\n\n  removeFile(fileID: string): void {\n    this.removeFiles([fileID])\n  }\n\n  pauseResume(fileID: string): boolean | undefined {\n    if (\n      !this.getState().capabilities.resumableUploads ||\n      this.getFile(fileID).progress.uploadComplete\n    ) {\n      return undefined\n    }\n\n    const file = this.getFile(fileID)\n    const wasPaused = file.isPaused || false\n    const isPaused = !wasPaused\n\n    this.setFileState(fileID, {\n      isPaused,\n    })\n\n    this.emit('upload-pause', file, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll(): void {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return (\n        !updatedFiles[file].progress.uploadComplete &&\n        updatedFiles[file].progress.uploadStarted\n      )\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = { ...updatedFiles[file], isPaused: true }\n      updatedFiles[file] = updatedFile\n    })\n\n    this.setState({ files: updatedFiles })\n    this.emit('pause-all')\n  }\n\n  resumeAll(): void {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return (\n        !updatedFiles[file].progress.uploadComplete &&\n        updatedFiles[file].progress.uploadStarted\n      )\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({ files: updatedFiles })\n\n    this.emit('resume-all')\n  }\n\n  retryAll(): Promise<UploadResult<M, B> | undefined> {\n    const updatedFiles = { ...this.getState().files }\n    const filesToRetry = Object.keys(updatedFiles).filter((file) => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null,\n    })\n\n    this.emit('retry-all', Object.values(updatedFiles))\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: [],\n      })\n    }\n\n    const uploadID = this.#createUpload(filesToRetry, {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  cancelAll(): void {\n    this.emit('cancel-all')\n\n    const { files } = this.getState()\n\n    const fileIDs = Object.keys(files)\n    if (fileIDs.length) {\n      this.removeFiles(fileIDs)\n    }\n\n    this.setState(defaultUploadState)\n  }\n\n  retryUpload(fileID: string): Promise<UploadResult<M, B> | undefined> {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false,\n    })\n\n    this.emit('upload-retry', this.getFile(fileID))\n\n    const uploadID = this.#createUpload([fileID], {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  logout(): void {\n    this.iteratePlugins((plugin) => {\n      ;(plugin as UnknownProviderPlugin<M, B>).provider?.logout?.()\n    })\n  }\n\n  // ___Why throttle at 500ms?\n  //    - We must throttle at >250ms for superfocus in Dashboard to work well\n  //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n  //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n  //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n  //    - We must throttle at around >500ms to avoid performance lags.\n  //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n  // todo when uploading multiple files, this will cause problems because they share the same throttle,\n  // meaning some files might never get their progress reported (eaten up by progress events from other files)\n  calculateProgress = throttle(\n    (file, data) => {\n      const fileInState = this.getFile(file?.id)\n      if (file == null || !fileInState) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n\n      if (fileInState.progress.percentage === 100) {\n        this.log(\n          `Not setting progress for a file that has been already uploaded: ${file.id}`,\n        )\n        return\n      }\n\n      // bytesTotal may be null or zero; in that case we can't divide by it\n      const canHavePercentage =\n        Number.isFinite(data.bytesTotal) && data.bytesTotal > 0\n      this.setFileState(file.id, {\n        progress: {\n          ...fileInState.progress,\n          bytesUploaded: data.bytesUploaded,\n          bytesTotal: data.bytesTotal,\n          percentage:\n            canHavePercentage ?\n              Math.round((data.bytesUploaded / data.bytesTotal) * 100)\n            : 0,\n        },\n      })\n\n      this.calculateTotalProgress()\n    },\n    500,\n    { leading: true, trailing: true },\n  )\n\n  calculateTotalProgress(): void {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles()\n\n    const inProgress = files.filter((file) => {\n      return (\n        file.progress.uploadStarted ||\n        file.progress.preprocess ||\n        file.progress.postprocess\n      )\n    })\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0)\n      this.setState({ totalProgress: 0 })\n      return\n    }\n\n    const sizedFiles = inProgress.filter(\n      (file) => file.progress.bytesTotal != null,\n    )\n    const unsizedFiles = inProgress.filter(\n      (file) => file.progress.bytesTotal == null,\n    )\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + (file.progress.percentage as number)\n      }, 0)\n      const totalProgress = Math.round((currentProgress / progressMax) * 100)\n      this.setState({ totalProgress })\n      return\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return (acc + (file.progress.bytesTotal ?? 0)) as number\n    }, 0)\n    const averageSize = totalSize / sizedFiles.length\n    totalSize += averageSize * unsizedFiles.length\n\n    let uploadedSize = 0\n    sizedFiles.forEach((file) => {\n      uploadedSize += file.progress.bytesUploaded as number\n    })\n    unsizedFiles.forEach((file) => {\n      uploadedSize += (averageSize * (file.progress.percentage || 0)) / 100\n    })\n\n    let totalProgress =\n      totalSize === 0 ? 0 : Math.round((uploadedSize / totalSize) * 100)\n\n    // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n    if (totalProgress > 100) {\n      totalProgress = 100\n    }\n\n    this.setState({ totalProgress })\n    this.emit('progress', totalProgress)\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n  #addListeners(): void {\n    // Type inference only works for inline functions so we have to type it again\n    const errorHandler: UppyEventMap<M, B>['error'] = (\n      error,\n      file,\n      response,\n    ) => {\n      let errorMsg = error.message || 'Unknown error'\n      if (error.details) {\n        errorMsg += ` ${error.details}`\n      }\n\n      this.setState({ error: errorMsg })\n\n      if (file != null && file.id in this.getState().files) {\n        this.setFileState(file.id, {\n          error: errorMsg,\n          response,\n        })\n      }\n    }\n\n    this.on('error', errorHandler)\n\n    this.on('upload-error', (file, error, response) => {\n      errorHandler(error, file, response)\n\n      if (typeof error === 'object' && error.message) {\n        this.log(error.message, 'error')\n        const newError = new Error(\n          this.i18n('failedToUpload', { file: file?.name ?? '' }),\n        ) as any // we may want a new custom error here\n        newError.isUserFacing = true // todo maybe don't do this with all errors?\n        newError.details = error.message\n        if (error.details) {\n          newError.details += ` ${error.details}`\n        }\n        this.#informAndEmit([newError])\n      } else {\n        this.#informAndEmit([error])\n      }\n    })\n\n    let uploadStalledWarningRecentlyEmitted: ReturnType<\n      typeof setTimeout\n    > | null = null\n    this.on('upload-stalled', (error, files) => {\n      const { message } = error\n      const details = files.map((file) => file.meta.name).join(', ')\n      if (!uploadStalledWarningRecentlyEmitted) {\n        this.info({ message, details }, 'warning', this.opts.infoTimeout)\n        uploadStalledWarningRecentlyEmitted = setTimeout(() => {\n          uploadStalledWarningRecentlyEmitted = null\n        }, this.opts.infoTimeout)\n      }\n      this.log(`${message} ${details}`.trim(), 'warning')\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    const onUploadStarted = (files: UppyFile<M, B>[]): void => {\n      const filesFiltered = files.filter((file) => {\n        const exists = file != null && this.getFile(file.id)\n        if (!exists)\n          this.log(\n            `Not setting progress for a file that has been removed: ${file?.id}`,\n          )\n        return exists\n      })\n\n      const filesState = Object.fromEntries(\n        filesFiltered.map((file) => [\n          file.id,\n          {\n            progress: {\n              uploadStarted: Date.now(),\n              uploadComplete: false,\n              percentage: 0,\n              bytesUploaded: 0,\n              bytesTotal: file.size,\n            } as FileProgressStarted,\n          },\n        ]),\n      )\n\n      this.patchFilesState(filesState)\n    }\n\n    this.on('upload-start', onUploadStarted)\n\n    this.on('upload-progress', this.calculateProgress)\n\n    this.on('upload-success', (file, uploadResp) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n\n      const currentProgress = this.getFile(file.id).progress\n      this.setFileState(file.id, {\n        progress: {\n          ...currentProgress,\n          postprocess:\n            this.#postProcessors.size > 0 ?\n              {\n                mode: 'indeterminate',\n              }\n            : undefined,\n          uploadComplete: true,\n          percentage: 100,\n          bytesUploaded: currentProgress.bytesTotal,\n        } as FileProgressStarted,\n        response: uploadResp,\n        uploadURL: uploadResp.uploadURL,\n        isPaused: false,\n      })\n\n      // Remote providers sometimes don't tell us the file size,\n      // but we can know how many bytes we uploaded once the upload is complete.\n      if (file.size == null) {\n        this.setFileState(file.id, {\n          size: uploadResp.bytesUploaded || currentProgress.bytesTotal,\n        })\n      }\n\n      this.calculateTotalProgress()\n    })\n\n    this.on('preprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getFile(file.id).progress, preprocess: progress },\n      })\n    })\n\n    this.on('preprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n      const files = { ...this.getState().files }\n      files[file.id] = {\n        ...files[file.id],\n        progress: { ...files[file.id].progress },\n      }\n      delete files[file.id].progress.preprocess\n\n      this.setState({ files })\n    })\n\n    this.on('postprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n      this.setFileState(file.id, {\n        progress: {\n          ...this.getState().files[file.id].progress,\n          postprocess: progress,\n        },\n      })\n    })\n\n    this.on('postprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(\n          `Not setting progress for a file that has been removed: ${file?.id}`,\n        )\n        return\n      }\n      const files = {\n        ...this.getState().files,\n      }\n      files[file.id] = {\n        ...files[file.id],\n        progress: {\n          ...files[file.id].progress,\n        },\n      }\n      delete files[file.id].progress.postprocess\n\n      this.setState({ files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this.calculateTotalProgress()\n    })\n\n    // @ts-expect-error should fix itself when dashboard it typed (also this doesn't belong here)\n    this.on('dashboard:file-edit-complete', (file) => {\n      if (file) {\n        this.#checkRequiredMetaFieldsOnFile(file)\n      }\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('online', this.#updateOnlineStatus)\n      window.addEventListener('offline', this.#updateOnlineStatus)\n      setTimeout(this.#updateOnlineStatus, 3000)\n    }\n  }\n\n  updateOnlineStatus(): void {\n    const online = window.navigator.onLine ?? true\n    if (!online) {\n      this.emit('is-offline')\n      this.info(this.i18n('noInternetConnection'), 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info(this.i18n('connectedToInternet'), 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  #updateOnlineStatus = this.updateOnlineStatus.bind(this)\n\n  getID(): string {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core.\n   */\n  use<T extends typeof BasePlugin<any, M, B>>(\n    Plugin: T,\n    // We want to let the plugin decide whether `opts` is optional or not\n    // so we spread the argument rather than defining `opts:` ourselves.\n    ...args: OmitFirstArg<ConstructorParameters<T>>\n  ): this {\n    if (typeof Plugin !== 'function') {\n      const msg =\n        `Expected a plugin class, but got ${\n          Plugin === null ? 'null' : typeof Plugin\n        }.` +\n        ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, ...args)\n    const pluginId = plugin.id\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      const msg =\n        `Already found a plugin named '${existsPluginAlready.id}'. ` +\n        `Tried to use: '${pluginId}'.\\n` +\n        'Uppy plugins must have unique `id` options.'\n      throw new Error(msg)\n    }\n\n    // @ts-expect-error does exist\n    if (Plugin.VERSION) {\n      // @ts-expect-error does exist\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`)\n    }\n\n    if (plugin.type in this.#plugins) {\n      this.#plugins[plugin.type].push(plugin)\n    } else {\n      this.#plugins[plugin.type] = [plugin]\n    }\n    plugin.install()\n\n    this.emit('plugin-added', plugin)\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name.\n   */\n  getPlugin<T extends UnknownPlugin<M, B> = UnknownPlugin<M, B>>(\n    id: string,\n  ): T | undefined {\n    for (const plugins of Object.values(this.#plugins)) {\n      const foundPlugin = plugins.find((plugin) => plugin.id === id)\n      if (foundPlugin != null) return foundPlugin as T\n    }\n    return undefined\n  }\n\n  private [Symbol.for('uppy test: getPlugins')](\n    type: string,\n  ): UnknownPlugin<M, B>[] {\n    return this.#plugins[type]\n  }\n\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   */\n  iteratePlugins(method: (plugin: UnknownPlugin<M, B>) => void): void {\n    Object.values(this.#plugins).flat(1).forEach(method)\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n  removePlugin(instance: UnknownPlugin<M, B>): void {\n    this.log(`Removing plugin ${instance.id}`)\n    this.emit('plugin-remove', instance)\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const list = this.#plugins[instance.type]\n    // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n    const index = list.findIndex((item) => item.id === instance.id)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n\n    const state = this.getState()\n    const updatedState = {\n      plugins: {\n        ...state.plugins,\n        [instance.id]: undefined,\n      },\n    }\n    this.setState(updatedState)\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  destroy(): void {\n    this.log(\n      `Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`,\n    )\n\n    this.cancelAll()\n\n    this.#storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      this.removePlugin(plugin)\n    })\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', this.#updateOnlineStatus)\n      window.removeEventListener('offline', this.#updateOnlineStatus)\n    }\n  }\n\n  hideInfo(): void {\n    const { info } = this.getState()\n\n    this.setState({ info: info.slice(1) })\n\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   */\n  info(\n    message:\n      | string\n      | { message: string; details?: string | Record<string, string> },\n    type: LogLevel = 'info',\n    duration = 3000,\n  ): void {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: [\n        ...this.getState().info,\n        {\n          type,\n          message: isComplexMessage ? message.message : message,\n          details: isComplexMessage ? message.details : null,\n        },\n      ],\n    })\n\n    setTimeout(() => this.hideInfo(), duration)\n\n    this.emit('info-visible')\n  }\n\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   */\n  log(message: string | Record<any, any> | Error, type?: string): void {\n    const { logger } = this.opts\n    switch (type) {\n      case 'error':\n        logger.error(message)\n        break\n      case 'warning':\n        logger.warn(message)\n        break\n      default:\n        logger.debug(message)\n        break\n    }\n  }\n\n  // We need to store request clients by a unique ID, so we can share RequestClient instances across files\n  // this allows us to do rate limiting and synchronous operations like refreshing provider tokens\n  // example: refreshing tokens: if each file has their own requestclient,\n  // we don't have any way to synchronize all requests in order to\n  // - block all requests\n  // - refresh the token\n  // - unblock all requests and allow them to run with a the new access token\n  // back when we had a requestclient per file, once an access token expired,\n  // all 6 files would go ahead and refresh the token at the same time\n  // (calling /refresh-token up to 6 times), which will probably fail for some providers\n  #requestClientById = new Map<string, unknown>()\n\n  registerRequestClient(id: string, client: unknown): void {\n    this.#requestClientById.set(id, client)\n  }\n\n  /** @protected */\n  getRequestClientForFile<Client>(file: UppyFile<M, B>): Client {\n    if (!file.remote)\n      throw new Error(\n        `Tried to get RequestClient for a non-remote file ${file.id}`,\n      )\n    const requestClient = this.#requestClientById.get(\n      file.remote.requestClientId,\n    )\n    if (requestClient == null)\n      throw new Error(\n        `requestClientId \"${file.remote.requestClientId}\" not registered for file \"${file.id}\"`,\n      )\n    return requestClient as Client\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore(uploadID: string): Promise<UploadResult<M, B> | undefined> {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this.#removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this.#runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   */\n  #createUpload(\n    fileIDs: string[],\n    opts: { forceAllowNewUpload?: boolean } = {},\n  ): string {\n    // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n    const { forceAllowNewUpload = false } = opts\n\n    const { allowNewUpload, currentUploads } = this.getState()\n    if (!allowNewUpload && !forceAllowNewUpload) {\n      throw new Error('Cannot create a new upload: already uploading.')\n    }\n\n    const uploadID = nanoid()\n\n    this.emit('upload', uploadID, this.getFilesByIds(fileIDs))\n\n    this.setState({\n      allowNewUpload:\n        this.opts.allowMultipleUploadBatches !== false &&\n        this.opts.allowMultipleUploads !== false,\n\n      currentUploads: {\n        ...currentUploads,\n        [uploadID]: {\n          fileIDs,\n          step: 0,\n          result: {},\n        },\n      },\n    })\n\n    return uploadID\n  }\n\n  private [Symbol.for('uppy test: createUpload')](...args: any[]): string {\n    // @ts-expect-error https://github.com/microsoft/TypeScript/issues/47595\n    return this.#createUpload(...args)\n  }\n\n  #getUpload(uploadID: string): CurrentUpload<M, B> {\n    const { currentUploads } = this.getState()\n\n    return currentUploads[uploadID]\n  }\n\n  /**\n   * Add data to an upload's result object.\n   */\n  addResultData(uploadID: string, data: CurrentUpload<M, B>['result']): void {\n    if (!this.#getUpload(uploadID)) {\n      this.log(\n        `Not setting result for an upload that has been removed: ${uploadID}`,\n      )\n      return\n    }\n    const { currentUploads } = this.getState()\n    const currentUpload = {\n      ...currentUploads[uploadID],\n      result: { ...currentUploads[uploadID].result, ...data },\n    }\n    this.setState({\n      currentUploads: { ...currentUploads, [uploadID]: currentUpload },\n    })\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   */\n  #removeUpload(uploadID: string): void {\n    const currentUploads = { ...this.getState().currentUploads }\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads,\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   */\n  async #runUpload(uploadID: string): Promise<UploadResult<M, B> | undefined> {\n    const getCurrentUpload = (): CurrentUpload<M, B> => {\n      const { currentUploads } = this.getState()\n      return currentUploads[uploadID]\n    }\n\n    let currentUpload = getCurrentUpload()\n\n    const steps = [\n      ...this.#preProcessors,\n      ...this.#uploaders,\n      ...this.#postProcessors,\n    ]\n    try {\n      for (let step = currentUpload.step || 0; step < steps.length; step++) {\n        if (!currentUpload) {\n          break\n        }\n        const fn = steps[step]\n\n        this.setState({\n          currentUploads: {\n            ...this.getState().currentUploads,\n            [uploadID]: {\n              ...currentUpload,\n              step,\n            },\n          },\n        })\n\n        const { fileIDs } = currentUpload\n\n        // TODO give this the `updatedUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        await fn(fileIDs, uploadID)\n\n        // Update currentUpload value in case it was modified asynchronously.\n        currentUpload = getCurrentUpload()\n      }\n    } catch (err) {\n      this.#removeUpload(uploadID)\n      throw err\n    }\n\n    // Set result data.\n    if (currentUpload) {\n      // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n      // stuck in the postprocessing UI while the upload is fully complete.\n      // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n      // all, and never mark the postprocessing as complete. This is fine on its own but we\n      // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n      // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n      // before the postprocessing plugins can emit events.\n      //\n      // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n      // postprocessing completion, we do it instead.\n      currentUpload.fileIDs.forEach((fileID) => {\n        const file = this.getFile(fileID)\n        if (file && file.progress.postprocess) {\n          this.emit('postprocess-complete', file)\n        }\n      })\n\n      const files = currentUpload.fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => !file.error)\n      const failed = files.filter((file) => file.error)\n      this.addResultData(uploadID, { successful, failed, uploadID })\n\n      // Update currentUpload value in case it was modified asynchronously.\n      currentUpload = getCurrentUpload()\n    }\n    // Emit completion events.\n    // This is in a separate function so that the `currentUploads` variable\n    // always refers to the latest state. In the handler right above it refers\n    // to an outdated object without the `.result` property.\n    let result\n    if (currentUpload) {\n      result = currentUpload.result\n      this.emit('complete', result)\n\n      this.#removeUpload(uploadID)\n    }\n    if (result == null) {\n      this.log(\n        `Not setting result for an upload that has been removed: ${uploadID}`,\n      )\n    }\n    return result\n  }\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   */\n  upload(): Promise<NonNullable<UploadResult<M, B>> | undefined> {\n    if (!this.#plugins['uploader']?.length) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    let { files } = this.getState()\n\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files)\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(\n        new Error(\n          'Not starting the upload because onBeforeUpload returned false',\n        ),\n      )\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult\n      // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n      this.setState({\n        files,\n      })\n    }\n\n    return Promise.resolve()\n      .then(() => this.#restricter.validateMinNumberOfFiles(files))\n      .catch((err) => {\n        this.#informAndEmit([err])\n        throw err\n      })\n      .then(() => {\n        if (!this.#checkRequiredMetaFields(files)) {\n          throw new RestrictionError(this.i18n('missingRequiredMetaField'))\n        }\n      })\n      .catch((err) => {\n        // Doing this in a separate catch because we already emited and logged\n        // all the errors in `checkRequiredMetaFields` so we only throw a generic\n        // missing fields error here.\n        throw err\n      })\n      .then(() => {\n        const { currentUploads } = this.getState()\n        // get a list of files that are currently assigned to uploads\n        const currentlyUploadingFiles = Object.values(currentUploads).flatMap(\n          (curr) => curr.fileIDs,\n        )\n\n        const waitingFileIDs: string[] = []\n        Object.keys(files).forEach((fileID) => {\n          const file = this.getFile(fileID)\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\n          if (\n            !file.progress.uploadStarted &&\n            currentlyUploadingFiles.indexOf(fileID) === -1\n          ) {\n            waitingFileIDs.push(file.id)\n          }\n        })\n\n        const uploadID = this.#createUpload(waitingFileIDs)\n        return this.#runUpload(uploadID)\n      })\n      .catch((err) => {\n        this.emit('error', err)\n        this.log(err, 'error')\n        throw err\n      })\n  }\n}\n\nexport default Uppy\n"],"mappings":"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","ignoreList":[]}